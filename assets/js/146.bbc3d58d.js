(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{646:function(_,v,e){"use strict";e.r(v);var o=e(6),a=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"http缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[_._v("#")]),_._v(" Http缓存")]),_._v(" "),e("p",[_._v("参阅了一些浏览器缓存的资料，本文通过一张图来归纳总结其过程。")]),_._v(" "),e("p",[_._v("浏览器第一次向一个web服务器发起"),e("code",[_._v("http")]),_._v("请求后，服务器会返回请求的资源，并且在响应头中添加一些有关缓存的字段如："),e("code",[_._v("Cache-Control")]),_._v("、"),e("code",[_._v("Expires")]),_._v("、"),e("code",[_._v("Last-Modified")]),_._v("、"),e("code",[_._v("ETag")]),_._v("、"),e("code",[_._v("Date")]),_._v("等等。之后浏览器再向该服务器请求该资源就可以视情况使用"),e("strong",[_._v("强缓存")]),_._v("和"),e("strong",[_._v("协商缓存")]),_._v("。")]),_._v(" "),e("ul",[e("li",[_._v("强缓存：浏览器直接从本地缓存中获取数据，不与服务器进行交互。")]),_._v(" "),e("li",[_._v("协商缓存：浏览器发送请求到服务器，服务器判定是否可使用本地缓存。")]),_._v(" "),e("li",[_._v("联系与区别：两种缓存方式最终使用的都是本地缓存；前者无需与服务器交互，后者需要。")])]),_._v(" "),e("p",[_._v("下面假定浏览器已经访问了服务器，服务器返回了缓存相关的头部字段且浏览器已对相关资源做好缓存。通过下图来分析强缓存和协商缓存：")]),_._v(" "),e("p",[e("img",{attrs:{src:"https://my-blog-leo.oss-cn-chengdu.aliyuncs.com/3884731615-5b5eb9db0731a_fix732.webp",alt:"clipboard.png"}})]),_._v(" "),e("h3",{attrs:{id:"强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[_._v("#")]),_._v(" 强缓存")]),_._v(" "),e("p",[_._v("如图红线所示的过程代表强缓存。用户发起了一个"),e("code",[_._v("http")]),_._v("请求后，浏览器发现先本地已有所请求资源的缓存，便开始检查缓存是否过期。有两个http头部字段控制缓存的有效期："),e("code",[_._v("Expires")]),_._v("和"),e("code",[_._v("Cache-Control")]),_._v("，浏览器是根据以下两步来判定缓存是否过期的：")]),_._v(" "),e("ol",[e("li",[_._v("查看缓存是否有"),e("code",[_._v("Cache-Control")]),_._v("的"),e("code",[_._v("s-maxage")]),_._v("或"),e("code",[_._v("max-age")]),_._v("指令，若有，则使用响应报文生成时间"),e("code",[_._v("Date + s-maxage/max-age")]),_._v("获得过期时间，再与当前时间进行对比（"),e("code",[_._v("s-maxage")]),_._v("适用于多用户使用的公共缓存服务器）；")]),_._v(" "),e("li",[_._v("如果没有"),e("code",[_._v("Cache-Control")]),_._v("的"),e("code",[_._v("s-maxage")]),_._v("或"),e("code",[_._v("max-age")]),_._v("指令，则比较"),e("code",[_._v("Expires")]),_._v("中的过期时间与当前时间。"),e("code",[_._v("Expires")]),_._v("是一个绝对时间。")])]),_._v(" "),e("p",[e("strong",[_._v("注意")]),_._v("，在HTTP/1.1中，当首部字段"),e("code",[_._v("Cache-Control")]),_._v("有指定"),e("code",[_._v("s-maxage")]),_._v("或"),e("code",[_._v("max-age")]),_._v("指令，比起首部字段"),e("code",[_._v("Expires")]),_._v("，会优先处理"),e("code",[_._v("s-maxage")]),_._v("或"),e("code",[_._v("max-age")]),_._v("。")]),_._v(" "),e("p",[_._v("另外下面列几个"),e("code",[_._v("Cache-Control")]),_._v("的常用指令：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("no-cache")]),_._v("：含义是不使用本地缓存，需要使用协商缓存，也就是先与服务器确认缓存是否可用。")]),_._v(" "),e("li",[e("code",[_._v("no-store")]),_._v("：禁用缓存。")]),_._v(" "),e("li",[e("code",[_._v("public")]),_._v("：表明其他用户也可使用缓存，适用于公共缓存服务器的情况。")]),_._v(" "),e("li",[e("code",[_._v("private")]),_._v("：表明只有特定用户才能使用缓存，适用于公共缓存服务器的情况。")])]),_._v(" "),e("p",[_._v("经过上述两步判断后，若缓存未过期，返回状态码为"),e("code",[_._v("200")]),_._v("，则直接从本地读取缓存，这就完成了整个强缓存过程；如果缓存过期，则进入协商缓存或服务器返回新资源过程。")]),_._v(" "),e("h3",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[_._v("#")]),_._v(" 协商缓存")]),_._v(" "),e("p",[_._v("当浏览器发现缓存过期后，缓存并不一定不能使用了，因为服务器端的资源可能仍然没有改变，所以需要与服务器协商，让服务器判断本地缓存是否还能使用。此时浏览器会判断缓存中是否有"),e("code",[_._v("ETag")]),_._v("或"),e("code",[_._v("Last-Modified")]),_._v("字段，如果没有，则发起一个http请求，服务器根据请求返回资源；如果有这两个字段，则在请求头中添加"),e("code",[_._v("If-None-Match")]),_._v("字段（有"),e("code",[_._v("ETag")]),_._v("字段的话添加）、"),e("code",[_._v("If-Modified-Since")]),_._v("字段（有"),e("code",[_._v("Last-Modified")]),_._v("字段的话添加）。**注意：**如果同时发送"),e("code",[_._v("If-None-Match")]),_._v(" 、"),e("code",[_._v("If-Modified-Since")]),_._v("字段，服务器只要比较"),e("code",[_._v("If-None-Match")]),_._v("和"),e("code",[_._v("ETag")]),_._v("的内容是否一致即可；如果内容一致，服务器认为缓存仍然可用，则返回状态码"),e("code",[_._v("304")]),_._v("，浏览器直接读取本地缓存，这就完成了协商缓存的过程，也就是图中的蓝线；如果内容不一致，则视情况返回其他状态码，并返回所请求资源。下面详细解释下这个过程：")]),_._v(" "),e("h4",{attrs:{id:"_1-etag和if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-etag和if-none-match"}},[_._v("#")]),_._v(" 1."),e("code",[_._v("ETag")]),_._v("和"),e("code",[_._v("If-None-Match")])]),_._v(" "),e("p",[_._v("二者的值都是服务器为每份资源分配的唯一标识字符串。")]),_._v(" "),e("ul",[e("li",[_._v("浏览器请求资源，服务器会在响应报文头中加入"),e("code",[_._v("ETag")]),_._v("字段。资源更新时，服务器端的"),e("code",[_._v("ETag")]),_._v("值也随之更新；")]),_._v(" "),e("li",[_._v("浏览器再次请求资源时，会在请求报文头中添加"),e("code",[_._v("If-None-Match")]),_._v("字段，它的值就是上次响应报文中的"),e("code",[_._v("ETag")]),_._v("的值；")]),_._v(" "),e("li",[_._v("服务器会比对"),e("code",[_._v("ETag")]),_._v("与"),e("code",[_._v("If-None-Match")]),_._v("的值是否一致，如果不一致，服务器则接受请求，返回更新后的资源；如果一致，表明资源未更新，则返回状态码为"),e("code",[_._v("304")]),_._v("的响应，可继续使用本地缓存，要注意的是，此时响应头会加上"),e("code",[_._v("ETag")]),_._v("字段，即使它没有变化。")])]),_._v(" "),e("h4",{attrs:{id:"_2-last-modified和if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-last-modified和if-modified-since"}},[_._v("#")]),_._v(" 2."),e("code",[_._v("Last-Modified")]),_._v("和"),e("code",[_._v("If-Modified-Since")])]),_._v(" "),e("p",[_._v("二者的值都是GMT格式的时间字符串。")]),_._v(" "),e("ul",[e("li",[_._v("浏览器第一次向服务器请求资源后，服务器会在响应头中加上"),e("code",[_._v("Last-Modified")]),_._v("字段，表明该资源最后一次的修改时间；")]),_._v(" "),e("li",[_._v("浏览器再次请求该资源时，会在请求报文头中添加"),e("code",[_._v("If-Modified-Since")]),_._v("字段，它的值就是上次服务器响应报文中的"),e("code",[_._v("Last-Modified")]),_._v("的值；")]),_._v(" "),e("li",[_._v("服务器会比对"),e("code",[_._v("Last-Modified")]),_._v("与"),e("code",[_._v("If-Modified-Since")]),_._v("的值是否一致，如果不一致，服务器则接受请求，返回更新后的资源；如果一致，表明资源未更新，则返回状态码为"),e("code",[_._v("304")]),_._v("的响应，可继续使用本地缓存，与"),e("code",[_._v("ETag")]),_._v("不同的是：此时响应头中不会再添加"),e("code",[_._v("Last-Modified")]),_._v("字段。")])]),_._v(" "),e("h4",{attrs:{id:"_3-etag较之last-modified的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-etag较之last-modified的优势"}},[_._v("#")]),_._v(" 3."),e("code",[_._v("ETag")]),_._v("较之"),e("code",[_._v("Last-Modified")]),_._v("的优势")]),_._v(" "),e("p",[_._v("以下内容引用于："),e("a",{attrs:{href:"https://www.cnblogs.com/wonyun/p/5524617.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("http协商缓存VS强缓存"),e("OutboundLink")],1)]),_._v(" "),e("p",[_._v("你可能会觉得使用"),e("code",[_._v("Last-Modified")]),_._v("已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要"),e("code",[_._v("ETag")]),_._v("呢？"),e("code",[_._v("HTTP1.1")]),_._v("中"),e("code",[_._v("ETag")]),_._v("的出现主要是为了解决几个"),e("code",[_._v("Last-Modified")]),_._v("比较难解决的问题：")]),_._v(" "),e("ul",[e("li",[_._v("一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新"),e("code",[_._v("GET")]),_._v("；")]),_._v(" "),e("li",[_._v("某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，"),e("code",[_._v("If-Modified-Since")]),_._v("能检查到的粒度是s级的，这种修改无法判断(或者说"),e("code",[_._v("UNIX")]),_._v("记录"),e("code",[_._v("MTIME")]),_._v("只能精确到秒)；")]),_._v(" "),e("li",[_._v("某些服务器不能精确的得到文件的最后修改时间。")])]),_._v(" "),e("p",[_._v("这时，利用"),e("code",[_._v("ETag")]),_._v("能够更加准确的控制缓存，因为"),e("code",[_._v("ETag")]),_._v("是服务器自动生成的资源在服务器端的唯一标识符，资源每次变动，都会生成新的"),e("code",[_._v("ETag")]),_._v("值。"),e("code",[_._v("Last-Modified")]),_._v("与"),e("code",[_._v("ETag")]),_._v("是可以一起使用的，但服务器会优先验证"),e("code",[_._v("ETag")]),_._v("。")]),_._v(" "),e("h3",{attrs:{id:"用户行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#用户行为"}},[_._v("#")]),_._v(" 用户行为")]),_._v(" "),e("p",[_._v("最后附一张图说明用户行为对浏览器缓存的影响：\n"),e("img",{attrs:{src:"https://my-blog-leo.oss-cn-chengdu.aliyuncs.com/209513920-5b6e52467a1dc_fix732.webp",alt:"clipboard.png"}})])])}),[],!1,null,null,null);v.default=a.exports}}]);
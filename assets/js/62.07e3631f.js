(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{563:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol"}},[s._v("#")]),s._v(" Symbol")]),s._v(" "),a("p",[a("strong",[s._v("symbol")]),s._v(" 是一种基本数据类型 （primitive data type）。"),a("code",[s._v("Symbol()")]),s._v("函数会返回"),a("strong",[s._v("symbol")]),s._v('类型的值，该类型具有静态属性和静态方法。它的静态属性会暴露几个内建的成员对象；它的静态方法会暴露全局的symbol注册，且类似于内建对象类，但作为构造函数来说它并不完整，因为它不支持语法："'),a("code",[s._v("new Symbol()")]),s._v('"。')]),s._v(" "),a("p",[s._v("每个从"),a("code",[s._v("Symbol()")]),s._v("返回的symbol值都是唯一的。一个symbol值能作为对象属性的标识符；这是该数据类型仅有的目的。更进一步的解析见—— glossary entry for Symbol。")]),s._v(" "),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("description"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),s._v(" "),a("h3",{attrs:{id:"参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[s._v("#")]),s._v(" 参数")]),s._v(" "),a("p",[a("code",[s._v("description")]),s._v(" 可选可选的，字符串类型。对symbol的描述，可用于调试但不是访问symbol本身。")]),s._v(" "),a("h2",{attrs:{id:"描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[s._v("#")]),s._v(" 描述")]),s._v(" "),a("p",[s._v("直接使用"),a("code",[s._v("Symbol()")]),s._v("创建新的symbol类型，并用一个可选的字符串作为其描述。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面的代码创建了三个新的symbol类型。 注意，"),a("code",[s._v('Symbol("foo")')]),s._v(" 不会强制将字符串 “foo” 转换成symbol类型。它每次都会创建一个新的 symbol类型：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\t"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("下面带有 "),a("code",[s._v("new")]),s._v(" 运算符的语法将抛出 "),a("code",[s._v("TypeError")]),s._v("错误：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TypeError")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这会阻止创建一个显式的 Symbol 包装器对象而不是一个 Symbol 值。围绕原始数据类型创建一个显式包装器对象从 ECMAScript 6 开始不再被支持。 然而，现有的原始包装器对象，如 "),a("code",[s._v("new Boolean")]),s._v("、"),a("code",[s._v("new String")]),s._v("以及"),a("code",[s._v("new Number")]),s._v("，因为遗留原因仍可被创建。")]),s._v(" "),a("p",[s._v("如果你真的想创建一个 Symbol 包装器对象 ("),a("code",[s._v("Symbol wrapper object")]),s._v(")，你可以使用 "),a("code",[s._v("Object()")]),s._v(" 函数：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "symbol"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" symObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" symObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "object"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"全局共享的-symbol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局共享的-symbol"}},[s._v("#")]),s._v(" 全局共享的 Symbol")]),s._v(" "),a("p",[s._v("上面使用"),a("code",[s._v("Symbol()")]),s._v(" 函数的语法，不会在你的整个代码库中创建一个可用的全局?symbol类型。 要创建跨文件可用的symbol，甚至跨域（每个都有它自己的全局作用域） , 使用 "),a("code",[s._v("Symbol.for()")]),s._v("方法和 "),a("code",[s._v("Symbol.keyFor()")]),s._v("方法从全局的symbol注册表设置和取得symbol。")]),s._v(" "),a("h3",{attrs:{id:"在对象中查找-symbol-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在对象中查找-symbol-属性"}},[s._v("#")]),s._v(" 在对象中查找 Symbol 属性")]),s._v(" "),a("p",[a("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("方法让你在查找一个给定对象的符号属性时返回一个symbol类型的数组。注意，每个初始化的对象都是没有自己的symbol属性的，因此这个数组可能为空，除非你已经在对象上设置了symbol属性。")]),s._v(" "),a("h2",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[s._v("#")]),s._v(" 属性")]),s._v(" "),a("p",[a("code",[s._v("Symbol.length")]),s._v("长度属性，值为0。"),a("code",[s._v("Symbol.prototype")]),s._v(" "),a("code",[s._v("symbol")]),s._v("构造函数的原型。")]),s._v(" "),a("h3",{attrs:{id:"众所周知的-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#众所周知的-symbols"}},[s._v("#")]),s._v(" 众所周知的 symbols")]),s._v(" "),a("p",[s._v("除了自己创建的symbol，JavaScript还内建了一些在ECMAScript 5 之前没有暴露给开发者的symbol，它们代表了内部语言行为。它们可以使用以下属性访问：")]),s._v(" "),a("h4",{attrs:{id:"迭代-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代-symbols"}},[s._v("#")]),s._v(" 迭代 symbols")]),s._v(" "),a("p",[a("code",[s._v("Symbol.iterator")]),s._v("一个返回一个对象默认迭代器的方法。被 "),a("code",[s._v("for...of")]),s._v(" 使用。"),a("code",[s._v("Symbol.asyncIterator")]),s._v("一个返回对象默认的异步迭代器的方法。被 "),a("code",[s._v("for await of")]),s._v(" 使用。")]),s._v(" "),a("h4",{attrs:{id:"正则表达式-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式-symbols"}},[s._v("#")]),s._v(" 正则表达式 symbols")]),s._v(" "),a("p",[a("code",[s._v("Symbol.match")])]),s._v(" "),a("p",[s._v("一个用于对字符串进行匹配的方法，也用于确定一个对象是否可以作为正则表达式使用。被 "),a("code",[s._v("String.prototype.match()")]),s._v("使用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.replace")])]),s._v(" "),a("p",[s._v("一个替换匹配字符串的子串的方法. 被 "),a("code",[s._v("String.prototype.replace()")]),s._v("使用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.search()")])]),s._v(" "),a("p",[s._v("一个返回一个字符串中与正则表达式相匹配的索引的方法。被"),a("code",[s._v("String.prototype.search()")]),s._v("使用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.split")])]),s._v(" "),a("p",[s._v("一个在匹配正则表达式的索引处拆分一个字符串的方法.。被 "),a("code",[s._v("String.prototype.split()")]),s._v("使用。")]),s._v(" "),a("h4",{attrs:{id:"其他-symbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-symbols"}},[s._v("#")]),s._v(" 其他 symbols")]),s._v(" "),a("p",[a("code",[s._v("Symbol.hasInstance")])]),s._v(" "),a("p",[s._v("一个确定一个构造器对象识别的对象是否为它的实例的方法。被 "),a("code",[s._v("instanceof")]),s._v(" 使用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.isConcatSpreadable")])]),s._v(" "),a("p",[s._v("一个布尔值，表明一个对象是否应该flattened为它的数组元素。被 "),a("code",[s._v("Array.prototype.concat()")]),s._v("使用。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.unscopables")])]),s._v(" "),a("p",[s._v("拥有和继承属性名的一个对象的值被排除在与环境绑定的相关对象外。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.species")])]),s._v(" "),a("p",[s._v("一个用于创建派生对象的构造器函数。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.toPrimitive")])]),s._v(" "),a("p",[s._v("一个将对象转化为基本数据类型的方法。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.toStringTag")])]),s._v(" "),a("p",[s._v("用于对象的默认描述的字符串值。被 "),a("code",[s._v("Object.prototype.toString()")]),s._v(" 使用。")]),s._v(" "),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),a("p",[a("code",[s._v("Symbol.for(key)")])]),s._v(" "),a("p",[s._v("使用给定的key搜索现有的symbol，如果找到则返回该symbol。否则将使用给定的key在全局symbol注册表中创建一个新的symbol。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.keyFor(sym)")])]),s._v(" "),a("p",[s._v("从全局symbol注册表中，为给定的symbol检索一个共享的?symbol key。")]),s._v(" "),a("h2",{attrs:{id:"symbol-原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-原型"}},[s._v("#")]),s._v(" Symbol 原型")]),s._v(" "),a("p",[s._v("所有 Symbols 继承自 "),a("code",[s._v("Symbol.prototype")]),s._v(".")]),s._v(" "),a("h3",{attrs:{id:"属性-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性-2"}},[s._v("#")]),s._v(" 属性")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype.constructor")])]),s._v(" "),a("p",[s._v("返回创建实例原型的函数. 默认为 "),a("code",[s._v("Symbol")]),s._v("函数。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype.description")])]),s._v(" "),a("p",[s._v("一个包含symbol描述的只读字符串。")]),s._v(" "),a("h3",{attrs:{id:"方法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-2"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype.toSource()")])]),s._v(" "),a("p",[s._v("返回包含"),a("code",[s._v("Symbol")]),s._v("对象源码的字符串。覆盖"),a("code",[s._v("Object.prototype.toSource()")]),s._v("方法。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype.toString()")])]),s._v(" "),a("p",[s._v("返回包含Symbol描述符的字符串。 覆盖"),a("code",[s._v("Object.prototype.toString()")]),s._v("方法。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype.valueOf()")])]),s._v(" "),a("p",[s._v("返回 "),a("code",[s._v("Symbol")]),s._v("对象的初始值.。覆盖 "),a("code",[s._v("Object.prototype.valueOf()")]),s._v("方法。")]),s._v(" "),a("p",[a("code",[s._v("Symbol.prototype[@@toPrimitive]")])]),s._v(" "),a("p",[s._v("返回"),a("code",[s._v("Symbol")]),s._v("对象的初始值。")]),s._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),a("h3",{attrs:{id:"对-symbol-使用-typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对-symbol-使用-typeof-运算符"}},[s._v("#")]),s._v(" 对 symbol 使用 typeof 运算符")]),s._v(" "),a("p",[a("code",[s._v("typeof")]),s._v("运算符能帮助你识别 symbol 类型")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'symbol'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'symbol'")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'symbol'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"symbol-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-类型转换"}},[s._v("#")]),s._v(" Symbol 类型转换")]),s._v(" "),a("p",[s._v("当使用 symbol 值进行类型转换时需要注意一些事情：")]),s._v(" "),a("ul",[a("li",[s._v("尝试将一个 symbol 值转换为一个 number 值时，会抛出一个 "),a("code",[s._v("TypeError")]),s._v("错误 (e.g. "),a("code",[s._v("+sym")]),s._v(" or "),a("code",[s._v("sym | 0")]),s._v(").")]),s._v(" "),a("li",[s._v("使用宽松相等时， "),a("code",[s._v("Object(sym) == sym")]),s._v(" returns "),a("code",[s._v("true.")])]),s._v(" "),a("li",[s._v("这会阻止你从一个 symbol 值隐式地创建一个新的 string 类型的属性名。例如，"),a("code",[s._v('Symbol("foo") + "bar" 将抛出一个')]),s._v(" "),a("code",[s._v("TypeError")]),s._v(" (can't convert symbol to string).")]),s._v(" "),a("li",[s._v('"safer" '),a("code",[s._v("String(sym)")]),s._v(" conversion的作用会像symbol类型调用 "),a("code",[s._v("Symbol.prototype.toString()")]),s._v("一样，但是注意 "),a("code",[s._v("new String(sym)")]),s._v(" 将抛出异常。")])]),s._v(" "),a("h3",{attrs:{id:"symbols-与-for-in-迭代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbols-与-for-in-迭代"}},[s._v("#")]),s._v(" Symbols 与 "),a("code",[s._v("for...in")]),s._v(" 迭代")]),s._v(" "),a("p",[s._v("Symbols 在 "),a("code",[s._v("for...in")]),s._v("迭代中不可枚举。另外，"),a("code",[s._v("Object.getOwnPropertyNames()")]),s._v("不会返回 symbol 对象的属性，但是你能使用 "),a("code",[s._v("Object.getOwnPropertySymbols()")]),s._v("得到它们。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// logs "c" and "d"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"symbols-与-json-stringify"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbols-与-json-stringify"}},[s._v("#")]),s._v(" Symbols 与 "),a("code",[s._v("JSON.stringify()")])]),s._v(" "),a("p",[s._v("当使用 JSON.stringify() 时，以 symbol 值作为键的属性会被完全忽略：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("stringify")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '{}'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"symbol-包装器对象作为属性的键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#symbol-包装器对象作为属性的键"}},[s._v("#")]),s._v(" Symbol 包装器对象作为属性的键")]),s._v(" "),a("p",[s._v("当一个 Symbol 包装器对象作为一个属性的键时，这个对象将被强制转换为它包装过的 symbol 值：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n  obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// still 1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);